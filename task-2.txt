Öğrenci No: 240541609
AD-SOYAD: Alaa Madi

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:

# to be spacific about this problem the best soultion for it is binary serch and in some cases Weighted Guessing, here are the whole solutions: 



## Main Algorithm (Binary Search)

**Goal:** Find the secret number efficiently using as few guesses as possible.  

### Pseudocode
1. Set low = minimum possible number
2. Set high = maximum possible number
3. While low ≤ high:
    a. guess = (low + high) / 2
    b. Ask: "Is the secret number equal to guess?"
    c. If guess == secret number:
        - Print "Found the number: guess"
        - Break
    d. Else if guess < secret number:
        - low = guess + 1
    e. Else:
        - high = guess - 1
4. End


**Explanation:**  
Binary Search divides the range in half each time, minimizing the number of guesses required.


## Variant A - Linear Search

**Goal:** Sequentially guess numbers from minimum to maximum.  

### Pseudocode
1. Set guess = minimum possible number
2. While guess ≤ maximum possible number:
    a. Ask: "Is the secret number equal to guess?"
    b. If guess == secret number:
        - Print "Found the number: guess"
        - Break
    c. Else:
        - guess = guess + 1
3. End

**Explanation:**  
Simple and reliable, but may require many guesses for large ranges.



## Variant B - Random Guessing

**Goal:** Choose guesses randomly, eliminating numbers that have been guessed.  

### Pseudocode
1. Create a list of all possible numbers in the range
2. While list is not empty:
    a. Randomly select a number from the list as guess
    b. Ask: "Is the secret number equal to guess?"
    c. If guess == secret number:
        - Print "Found the number: guess"
        - Break
    d. Else:
        - Remove guess from the list
3. End

**Explanation:**  
Random guessing can be fun and effective in uncertain situations, but is less efficient than Binary Search.


## Variant C - Weighted Guessing

**Goal:** Use probabilities to guess numbers more likely to be correct.  

### Pseudocode

1. Assign probability weights to each number based on past trends or hints
2. While unchecked numbers exist:
    a. Choose number with highest probability as guess
    b. Ask: "Is the secret number equal to guess?"
    c. If guess == secret number:
        - Print "Found the number: guess"
        - Break
    d. Else:
        - Adjust probabilities based on feedback
        - Remove guess from list or set its probability = 0
3. End

**Explanation:**  
Weighted guessing focuses on likely candidates first, optimizing for prior knowledge or hints.


## MLL conversation:
Student: I have a problem and I should find the best algorithm for it act like problem solving and algorithm expert and help me. 
I want to create an optimal strategy for a number guessing game. 
Can you explain this problem more clearly for me?

LLM: Sure! The problem is about finding a number efficiently within a given range. 
Your main goals are:
1. Guess the secret number using as few attempts as possible.
2. Predict which numbers are more likely to be correct based on previous guesses.
3. Eliminate impossible numbers after each guess.
4. Consider alternative strategies if you want to experiment.

Student: Okay, that makes sense. So what strategies can I use?

LLM: There are several possible strategies:
- **Main Algorithm:** Binary Search – divide the range in half each time.
- **Variant A:** Linear Search – guess numbers sequentially.
- **Variant B:** Random Guessing – choose numbers randomly, removing guessed numbers.
- **Variant C:** Weighted Guessing – use probabilities if some numbers are more likely.

Student: I want you to write all these solutions as pseudocode.


