Öğrenci No: 240541609
AD-SOYAD: Alaa Madi

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
##for this algorthim ( according to the time complexity )the Hash Table Search would be the best if i have the abbilty to make hash for every single book i have on my library, then the index search if i create an index for the books else we can use the binary search but for me if i would work on project like this i would use Hashes

# Library Book Search - Linear Search

1. Input: search_query (book title or author)
2. For each book in library_list:
    a. If book.title == search_query OR book.author == search_query:
        - Print "Book found at shelf:", book.shelf
        - Exit
3. If no book found:
    - Print "Book not found"
4. End


# Library Book Search - Binary Search

1. Sort library_list by book.title or book.author
2. Input: search_query
3. low = 0
4. high = length(library_list) - 1
5. While low ≤ high:
    a. mid = (low + high) / 2
    b. If library_list[mid].title == search_query OR library_list[mid].author == search_query:
        - Print "Book found at shelf:", library_list[mid].shelf
        - Exit
    c. Else if search_query < library_list[mid].title:
        - high = mid - 1
    d. Else:
        - low = mid + 1
6. If not found:
    - Print "Book not found"
7. End


# Library Book Search - Index Search

1. Create an index: dictionary of first letter -> list of books starting with that letter
2. Input: search_query
3. first_letter = first character of search_query
4. If first_letter in index:
    a. For each book in index[first_letter]:
        - If book.title == search_query OR book.author == search_query:
            - Print "Book found at shelf:", book.shelf
            - Exit
5. Else:
    - Print "Book not found"
6. End



# Library Book Search - Hash Table

1. Create a dictionary: key = book title or author, value = shelf
2. Input: search_query
3. If search_query in library_dict:
    - Print "Book found at shelf:", library_dict[search_query]
4. Else:
    - Print "Book not found"
5. End



# LLM conversation

Student: I have a problem and I should find the best algorithm for it. 
I want to create a system to search for books in a library efficiently. Can you explain the problem?

LLM: Sure! The problem is about finding a book quickly in a library. 
Each book has properties like title, author, shelf number, and year of publication. 
The goal is to search by title or author and return the location quickly.

Student: Okay, what are the possible strategies to solve this?

LLM: There are several options:
1. Linear Search – check each book one by one.
2. Binary Search – sort the books first and use divide-and-conquer.
3. Index Search – create a dictionary or index based on the first letter.
4. Hash Table Search – use a hash table with title or author as key for direct lookup.

Student: Great! Can you write pseudocode for all these strategies?

LLM: Sure! There’s pseudocode for Linear Search, Binary Search, Index Search, and Hash Table Search ready to use.







